diff --git a/riscv/arith.h b/riscv/arith.h
index 398217e..127f9ce 100644
--- a/riscv/arith.h
+++ b/riscv/arith.h
@@ -7,6 +7,7 @@
 #include <cstdint>
 #include <climits>
 #include <cstddef>
+#include "russiancryptoarith.h"
 
 inline uint64_t mulhu(uint64_t a, uint64_t b)
 {
diff --git a/riscv/encoding.h b/riscv/encoding.h
index 3c5a473..d6b4fe0 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -284,8 +284,23 @@
 
 #endif
 /* Automatically generated by parse_opcodes.  */
+
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
+// Begin Russian Crypto Extension
+#define MATCH_GRASSHOOPER64_L 0x1c00202b
+#define MASK_GRASSHOOPER64_L  0xfe00707f
+#define MATCH_GRASSHOOPER64_RL 0x1e00202b
+#define MASK_GRASSHOOPER64_RL  0xfe00707f
+#define MATCH_GRASSHOOPER64_S 0xc10202b
+#define MASK_GRASSHOOPER64_S  0xfff0707f
+#define MATCH_GRASSHOOPER64_RS 0xc20202b
+#define MASK_GRASSHOOPER64_RS  0xfff0707f
+#define MATCH_STRIBOG64_S 0xc30202b
+#define MASK_STRIBOG64_S  0xfff0707f
+#define MATCH_STRIBOG64_L 0xc40202b
+#define MASK_STRIBOG64_L  0xfff0707f
+// End Russian Crypto Extension
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -2440,6 +2455,14 @@
 #define CAUSE_STORE_GUEST_PAGE_FAULT 0x17
 #endif
 #ifdef DECLARE_INSN
+// Begin Russian Crypto Extension
+DECLARE_INSN(grasshooper64_l, MATCH_GRASSHOOPER64_L, MASK_GRASSHOOPER64_L)
+DECLARE_INSN(grasshooper64_rl, MATCH_GRASSHOOPER64_RL, MASK_GRASSHOOPER64_RL)
+DECLARE_INSN(grasshooper64_s, MATCH_GRASSHOOPER64_S, MASK_GRASSHOOPER64_S)
+DECLARE_INSN(grasshooper64_rs, MATCH_GRASSHOOPER64_RS, MASK_GRASSHOOPER64_RS)
+DECLARE_INSN(stribog64_s, MATCH_STRIBOG64_S, MASK_STRIBOG64_S)
+DECLARE_INSN(stribog64_l, MATCH_STRIBOG64_L, MASK_STRIBOG64_L)
+// End Russian Crypto Extension
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/riscv/insns/maxu.h b/riscv/insns/maxu.h
index e1ecdf4..d6641d9 100644
--- a/riscv/insns/maxu.h
+++ b/riscv/insns/maxu.h
@@ -1,2 +1,3 @@
+
 require_extension('B');
 WRITE_RD(sext_xlen(RS1 > RS2 ? RS1 : RS2));
diff --git a/riscv/processor.cc b/riscv/processor.cc
index ba46ed9..d34e901 100644
--- a/riscv/processor.cc
+++ b/riscv/processor.cc
@@ -21,6 +21,8 @@
 #undef STATE
 #define STATE state
 
+long int full_latency_counter = 0;
+
 processor_t::processor_t(const char* isa, const char* priv, const char* varch,
                          simif_t* sim, uint32_t id, bool halt_on_reset,
                          FILE* log_file)
@@ -64,7 +66,7 @@ processor_t::~processor_t()
       fprintf(stderr, "%0" PRIx64 " %" PRIu64 "\n", it.first, it.second);
   }
 #endif
-
+  std::cout<<"Result latency "<< full_latency_counter <<std::endl;
   delete mmu;
   delete disassembler;
 }
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 342ea56..a12a314 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -922,6 +922,14 @@ riscv_insn_priv = \
 	sret \
 	wfi \
 
+riscv_insn_russian_crypto = \
+	grasshooper64_l \
+	grasshooper64_rl \
+	grasshooper64_s \
+	grasshooper64_rs \
+	stribog64_s \
+	stribog64_l \
+
 
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
@@ -937,6 +945,7 @@ riscv_insn_list = \
 	$(if $(HAVE_INT128),$(riscv_insn_ext_v),) \
 	$(riscv_insn_ext_h) \
 	$(riscv_insn_priv) \
+	$(riscv_insn_russian_crypto) \
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
diff --git a/riscv/tracer.h b/riscv/tracer.h
index 9f1bc78..4a2a9f2 100644
--- a/riscv/tracer.h
+++ b/riscv/tracer.h
@@ -4,8 +4,169 @@
 #define _RISCV_TRACER_H
 
 #include "processor.h"
+#include <map>
+extern long int full_latency_counter;
 
+static std::map<uint64_t, int> gOpcodesLatency =
+{{MATCH_MUL, 2},
+ {MATCH_MULH, 2},
+ {MATCH_MULHSU, 2},
+ {MATCH_MULHU, 2},
+ {MATCH_MULW, 2},
+ {MATCH_DIV, 32},
+ {MATCH_DIVU, 32},
+ {MATCH_REM, 32},
+ {MATCH_REMU, 32},
+ {MATCH_DIVW, 32},
+ {MATCH_DIVUW, 32},
+ {MATCH_REMW, 32},
+ {MATCH_REMUW, 32},
+ {MATCH_JAL, 1},
+ {MATCH_JALR, 1},
+ {MATCH_BEQ, 1},
+ {MATCH_BNE, 1},
+ {MATCH_BLT, 1},
+ {MATCH_BGE, 1},
+ {MATCH_BLTU, 1},
+ {MATCH_BGEU, 1},
+ {MATCH_C_JAL, 1},
+ {MATCH_C_J, 1},
+ {MATCH_C_BEQZ, 1},
+ {MATCH_C_BNEZ, 1},
+ {MATCH_C_JR, 1},
+ {MATCH_C_JALR, 1},
+ {MATCH_ECALL, 1},
+ {MATCH_EBREAK, 1},
+ {MATCH_SRET, 1},
+ {MATCH_MRET, 1},
+ {MATCH_DRET, 1},
+ {MATCH_CSRRW, 1},
+ {MATCH_CSRRS, 1},
+ {MATCH_CSRRC, 1},
+ {MATCH_CSRRWI, 1},
+ {MATCH_CSRRSI, 1},
+ {MATCH_CSRRCI, 1},
+ {MATCH_SFENCE_VMA, 1},
+ {MATCH_WFI, 1},
+ {MATCH_C_EBREAK, 1},
+ {MATCH_ADD, 1},
+ {MATCH_SUB, 1},
+ {MATCH_SLT, 1},
+ {MATCH_SLTU, 1},
+ {MATCH_SLL, 1},
+ {MATCH_SRL, 1},
+ {MATCH_SRA, 1},
+ {MATCH_XOR, 1},
+ {MATCH_OR, 1},
+ {MATCH_AND, 1},
+ {MATCH_ADDI, 1},
+ {MATCH_SLTI, 1},
+ {MATCH_SLTIU, 1},
+ {MATCH_XORI, 1},
+ {MATCH_ORI, 1},
+ {MATCH_ANDI, 1},
+ {MATCH_SLLI, 1},
+ {MATCH_SRLI, 1},
+ {MATCH_SRAI, 1},
+ {MATCH_LUI, 1},
+ {MATCH_AUIPC, 1},
+ {MATCH_ADDIW, 1},
+ {MATCH_SLLIW, 1},
+ {MATCH_SRLIW, 1},
+ {MATCH_SRAIW, 1},
+ {MATCH_ADDW, 1},
+ {MATCH_SLLW, 1},
+ {MATCH_SRLW, 1},
+ {MATCH_SUBW, 1},
+ {MATCH_SRAW, 1},
+ {MATCH_C_ADDI4SPN, 1},
+ {MATCH_C_ADDI, 1},
+ {MATCH_C_ADDIW, 1},
+ {MATCH_C_LI, 1},
+ {MATCH_C_LUI, 1},
+ {MATCH_C_SRLI, 1},
+ {MATCH_C_SRAI, 1},
+ {MATCH_C_ANDI, 1},
+ {MATCH_C_SUB, 1},
+ {MATCH_C_XOR, 1},
+ {MATCH_C_OR, 1},
+ {MATCH_C_AND, 1},
+ {MATCH_C_SUBW, 1},
+ {MATCH_C_ADDW, 1},
+ {MATCH_C_ADD, 1},
+ {MATCH_C_SLLI, 1},
+ {MATCH_C_MV, 1},
+
+ //BITMANIP
+ {MATCH_CPOP, 1},
+ {MATCH_CPOPW, 1},
+ {MATCH_SEXT_B, 1},
+ {MATCH_SEXT_H, 1},
+ {MATCH_MIN, 1},
+ {MATCH_MINU, 1},
+ {MATCH_MAX, 1},
+ {MATCH_MAXU, 1},
+ {MATCH_ANDN, 1},
+ {MATCH_ORN, 1},
+ {MATCH_XNOR, 1},
+ {MATCH_ROL, 1},
+ {MATCH_ROLW, 1},
+ {MATCH_RORI, 1},
+ {MATCH_RORIW, 1},
+ {MATCH_ROR, 1},
+ {MATCH_RORW, 1},
+ {MATCH_SLO, 1},
+ {MATCH_SLOI, 1},
+ {MATCH_SRO, 1},
+ {MATCH_SROI, 1},
+ {MATCH_PACK, 1},
+ {MATCH_PACKU, 1},
+ {MATCH_PACKH, 1},
+ {MATCH_PACKUW, 1},
+ {MATCH_PACKW, 1},
+ {MATCH_XPERM_N, 1},
+ {MATCH_XPERM_B, 1},
+ {MATCH_XPERM_H, 1},
+ {MATCH_XPERM_W, 1},
+ {MASK_SH1ADD, 1},
+ {MASK_SH2ADD, 1},
+ {MASK_SH3ADD, 1},
+ {MASK_SH1ADD_UW, 1},
+ {MASK_SH2ADD_UW, 1},
+ {MASK_SH3ADD_UW, 1},
+ {MASK_ADD_UW, 1},
+ {MASK_SLLI_UW, 1},
+ {MASK_BSET, 1},
+ {MASK_BSETI, 1},
+ {MASK_SBSETW, 1},
+ {MASK_SBSETIW, 1},
+ {MASK_BCLR, 1},
+ {MASK_BCLRI, 1},
+ {MASK_SBCLRIW, 1},
+ {MASK_CLMUL, 3},
+ {MASK_CLMULH, 3},
+ {MASK_CLMULR, 3},
+ {MASK_BMATOR, 4},
+ {MASK_BMATXOR, 4},
+ {MASK_BMATFLIP, 1},
+ {MASK_CMOV, 1},
+ {MASK_CMIX, 1},
+ {MASK_FSL, 1},
+ {MASK_FSLW, 1},
+ {MASK_FSR, 1},
+ {MASK_FSRI, 1},
+ {MASK_FSRIW, 1},
+ {MASK_FSRW, 1}
+};
 static inline void trace_opcode(processor_t* p, insn_bits_t opc, insn_t insn) {
+    try
+    {
+       full_latency_counter += gOpcodesLatency.at(opc);
+    }
+    catch(const std::exception& e)
+    {
+         full_latency_counter += 1;
+    }
 }
 
 #endif
diff --git a/spike_main/spike.cc b/spike_main/spike.cc
index 4cbe971..4ac3453 100644
--- a/spike_main/spike.cc
+++ b/spike_main/spike.cc
@@ -15,6 +15,7 @@
 #include <fstream>
 #include "../VERSION"
 
+
 static void help(int exit_code = 1)
 {
   fprintf(stderr, "Spike RISC-V ISA Simulator " SPIKE_VERSION "\n\n");
@@ -205,6 +206,7 @@ static unsigned long atoul_nonzero_safe(const char* s)
 
 int main(int argc, char** argv)
 {
+  std::cout<<"Welcome to spike"<<std::endl;
   bool debug = false;
   bool halted = false;
   bool histogram = false;
diff --git a/riscv/insns/grasshooper64_common.h b/riscv/insns/grasshooper64_common.h
new file mode 100644
index 0000000..5172f7f
--- /dev/null
+++ b/riscv/insns/grasshooper64_common.h
@@ -0,0 +1,86 @@
+static const uint8_t grasshooper_substitution_table[0x100] = {
+	0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16, 	// 00..07
+	0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D, 	// 08..0F
+	0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA, 	// 10..17
+	0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1, 	// 18..1F
+	0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21, 	// 20..27
+	0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F, 	// 28..2F
+	0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0, 	// 30..37
+	0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F, 	// 38..3F
+	0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB, 	// 40..47
+	0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC, 	// 48..4F
+	0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12, 	// 50..57
+	0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87, 	// 58..5F
+	0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7, 	// 60..67
+	0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1, 	// 68..6F
+	0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E, 	// 70..77
+	0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57, 	// 78..7F
+	0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9, 	// 80..87
+	0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03, 	// 88..8F
+	0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC, 	// 90..97
+	0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A, 	// 98..9F
+	0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44, 	// A0..A7
+	0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41, 	// A8..AF
+	0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F, 	// B0..B7
+	0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B, 	// B8..BF
+	0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7, 	// C0..C7
+	0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89, 	// C8..CF
+	0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE, 	// D0..D7
+	0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61, 	// D8..DF
+	0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B, 	// E0..E7
+	0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52, 	// E8..EF
+	0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0, 	// F0..F7
+	0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6, 	// F8..FF
+};
+
+static const uint8_t grasshooper_reverse_substitution_table[0x100] = {
+	0xA5, 0x2D, 0x32, 0x8F, 0x0E, 0x30, 0x38, 0xC0, 	// 00..07
+	0x54, 0xE6, 0x9E, 0x39, 0x55, 0x7E, 0x52, 0x91, 	// 08..0F
+	0x64, 0x03, 0x57, 0x5A, 0x1C, 0x60, 0x07, 0x18, 	// 10..17
+	0x21, 0x72, 0xA8, 0xD1, 0x29, 0xC6, 0xA4, 0x3F, 	// 18..1F
+	0xE0, 0x27, 0x8D, 0x0C, 0x82, 0xEA, 0xAE, 0xB4, 	// 20..27
+	0x9A, 0x63, 0x49, 0xE5, 0x42, 0xE4, 0x15, 0xB7, 	// 28..2F
+	0xC8, 0x06, 0x70, 0x9D, 0x41, 0x75, 0x19, 0xC9, 	// 30..37
+	0xAA, 0xFC, 0x4D, 0xBF, 0x2A, 0x73, 0x84, 0xD5, 	// 38..3F
+	0xC3, 0xAF, 0x2B, 0x86, 0xA7, 0xB1, 0xB2, 0x5B, 	// 40..47
+	0x46, 0xD3, 0x9F, 0xFD, 0xD4, 0x0F, 0x9C, 0x2F, 	// 48..4F
+	0x9B, 0x43, 0xEF, 0xD9, 0x79, 0xB6, 0x53, 0x7F, 	// 50..57
+	0xC1, 0xF0, 0x23, 0xE7, 0x25, 0x5E, 0xB5, 0x1E, 	// 58..5F
+	0xA2, 0xDF, 0xA6, 0xFE, 0xAC, 0x22, 0xF9, 0xE2, 	// 60..67
+	0x4A, 0xBC, 0x35, 0xCA, 0xEE, 0x78, 0x05, 0x6B, 	// 68..6F
+	0x51, 0xE1, 0x59, 0xA3, 0xF2, 0x71, 0x56, 0x11, 	// 70..77
+	0x6A, 0x89, 0x94, 0x65, 0x8C, 0xBB, 0x77, 0x3C, 	// 78..7F
+	0x7B, 0x28, 0xAB, 0xD2, 0x31, 0xDE, 0xC4, 0x5F, 	// 80..87
+	0xCC, 0xCF, 0x76, 0x2C, 0xB8, 0xD8, 0x2E, 0x36, 	// 88..8F
+	0xDB, 0x69, 0xB3, 0x14, 0x95, 0xBE, 0x62, 0xA1, 	// 90..97
+	0x3B, 0x16, 0x66, 0xE9, 0x5C, 0x6C, 0x6D, 0xAD, 	// 98..9F
+	0x37, 0x61, 0x4B, 0xB9, 0xE3, 0xBA, 0xF1, 0xA0, 	// A0..A7
+	0x85, 0x83, 0xDA, 0x47, 0xC5, 0xB0, 0x33, 0xFA, 	// A8..AF
+	0x96, 0x6F, 0x6E, 0xC2, 0xF6, 0x50, 0xFF, 0x5D, 	// B0..B7
+	0xA9, 0x8E, 0x17, 0x1B, 0x97, 0x7D, 0xEC, 0x58, 	// B8..BF
+	0xF7, 0x1F, 0xFB, 0x7C, 0x09, 0x0D, 0x7A, 0x67, 	// C0..C7
+	0x45, 0x87, 0xDC, 0xE8, 0x4F, 0x1D, 0x4E, 0x04, 	// C8..CF
+	0xEB, 0xF8, 0xF3, 0x3E, 0x3D, 0xBD, 0x8A, 0x88, 	// D0..D7
+	0xDD, 0xCD, 0x0B, 0x13, 0x98, 0x02, 0x93, 0x80, 	// D8..DF
+	0x90, 0xD0, 0x24, 0x34, 0xCB, 0xED, 0xF4, 0xCE, 	// E0..E7
+	0x99, 0x10, 0x44, 0x40, 0x92, 0x3A, 0x01, 0x26, 	// E8..EF
+	0x12, 0x1A, 0x48, 0x68, 0xF5, 0x81, 0x8B, 0xC7, 	// F0..F7
+	0xD6, 0x20, 0x0A, 0x08, 0x00, 0x4C, 0xD7, 0x74	 	// F8..FF
+};
+
+
+static const uint64_t matrix[8] ={
+    (uint64_t)227<<56 | (uint64_t)146 << 48 | (uint64_t)170<<40 | (uint64_t)85<<32 | (uint64_t)42 <<24 | (uint64_t)149 << 16 | (uint64_t)74 << 8 | 198, //148
+    (uint64_t)216<<56 | (uint64_t)180 << 48 | (uint64_t)2<<40 | (uint64_t)129 << 32 | (uint64_t)64 <<24 | (uint64_t)160 << 16 | (uint64_t)208 << 8 | 176, //16
+    (uint64_t)85<<56  | (uint64_t)187 << 48 | (uint64_t)240<<40 | (uint64_t)120<<32 | (uint64_t)188 <<24 | (uint64_t)222 << 16 | (uint64_t)239 << 8 | 90, //194
+    (uint64_t)237<<56 | (uint64_t)27 << 48 | (uint64_t)224<<40 | (uint64_t)112<<32 | (uint64_t)184 <<24 | (uint64_t)220 << 16 | (uint64_t)110 << 8 | 218, //192
+    (uint64_t)197<<56 | (uint64_t)39 << 48 | (uint64_t)214<<40 | (uint64_t)235<<32 | (uint64_t)117 <<24 | (uint64_t)58 << 16 | (uint64_t)157 << 8 | 139, //251
+    (uint64_t)187<<56 | (uint64_t)86 << 48 | (uint64_t)136<<40 | (uint64_t)196<<32 | (uint64_t)98 <<24 | (uint64_t)49 << 16 | (uint64_t)152 << 8 | 119, //133
+    (uint64_t)108<<56 | (uint64_t)218 << 48 | (uint64_t)129<<40 | (uint64_t)64<<32 | (uint64_t)160 <<24 | (uint64_t)208 << 16 | (uint64_t)104 << 8 | 216, //32
+    0x01																			    // 1
+};
+
+static const uint64_t* grasshooper_matrix[16] = {
+	&matrix[0], &matrix[6], &matrix[5], &matrix[1], &matrix[2], &matrix[3], &matrix[7], &matrix[4], 
+	&matrix[7], &matrix[3], &matrix[2], &matrix[1], &matrix[5], &matrix[6], &matrix[0], &matrix[7]
+};
\ No newline at end of file
diff --git a/riscv/insns/grasshooper64_l.h b/riscv/insns/grasshooper64_l.h
new file mode 100644
index 0000000..880320c
--- /dev/null
+++ b/riscv/insns/grasshooper64_l.h
@@ -0,0 +1,22 @@
+#include "grasshooper64_common.h"
+
+uint64_t r1 = RS1;
+uint64_t r2 = RS2;
+
+uint8_t * pointer_r1 = (uint8_t *) &r1;
+uint8_t * pointer_r2 = (uint8_t *) &r2;
+
+
+uint8_t result = pointer_r2[7];
+
+const uint8_t offset = 8;
+
+for (int i = 6; i >= 0; i--) {
+	result ^= bmatxor(pointer_r2[i], *grasshooper_matrix[i + offset]);
+}
+
+for (int i = 7; i >= 0; i--) {
+	result ^= bmatxor(pointer_r1[i], *grasshooper_matrix[i]);
+}
+
+WRITE_RD(result);
\ No newline at end of file
diff --git a/riscv/insns/grasshooper64_rl.h b/riscv/insns/grasshooper64_rl.h
new file mode 100644
index 0000000..6799089
--- /dev/null
+++ b/riscv/insns/grasshooper64_rl.h
@@ -0,0 +1,22 @@
+#include "grasshooper64_common.h"
+
+uint64_t r1 = RS1;
+uint64_t r2 = RS2;
+
+uint8_t * pointer_r1 = (uint8_t *) &r1;
+uint8_t * pointer_r2 = (uint8_t *) &r2;
+
+
+uint8_t result = pointer_r1[0];
+
+const uint8_t offset = 8;
+
+for (int i = 1; i < 8; i++) {
+	result ^= bmatxor(pointer_r1[i], *grasshooper_matrix[i - 1]);
+}
+
+for (int i = 0; i < 8; i++) {
+	result ^= bmatxor(pointer_r2[i], *grasshooper_matrix[i + offset - 1]);
+}
+
+WRITE_RD(result);
\ No newline at end of file
diff --git a/riscv/insns/grasshooper64_rs.h b/riscv/insns/grasshooper64_rs.h
new file mode 100644
index 0000000..e3d9d5e
--- /dev/null
+++ b/riscv/insns/grasshooper64_rs.h
@@ -0,0 +1,10 @@
+#include "grasshooper64_common.h"
+
+uint64_t temp = RS1;
+
+uint8_t * pointer = (uint8_t *)&temp;
+
+for(int i = 0; i < 8; i++)
+    pointer[i] = grasshooper_reverse_substitution_table[pointer[i]];
+
+WRITE_RD(temp);
diff --git a/riscv/insns/grasshooper64_s.h b/riscv/insns/grasshooper64_s.h
new file mode 100644
index 0000000..f33ac5a
--- /dev/null
+++ b/riscv/insns/grasshooper64_s.h
@@ -0,0 +1,11 @@
+#include "grasshooper64_common.h"
+
+uint64_t temp = RS1;
+
+uint8_t * pointer = (uint8_t *)&temp;
+
+for(int i = 0; i < 8; i++)
+    pointer[i] = grasshooper_substitution_table[pointer[i]];
+
+WRITE_RD(temp);
+
diff --git a/riscv/insns/stribog64_common.h b/riscv/insns/stribog64_common.h
new file mode 100644
index 0000000..6967265
--- /dev/null
+++ b/riscv/insns/stribog64_common.h
@@ -0,0 +1,38 @@
+
+static const uint8_t stribog_substitution_table[] = { 
+    0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16, 0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
+    0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA, 0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
+    0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21, 0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
+    0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0, 0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
+    0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB, 0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
+    0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12, 0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
+    0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7, 0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
+    0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E, 0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
+    0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9, 0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
+    0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC, 0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
+    0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44, 0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
+    0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F, 0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
+    0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7, 0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
+    0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE, 0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
+    0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B, 0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
+    0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0, 0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6
+}; 
+
+static const uint64_t stribog_l_matrix[]  = {
+    0x8e20faa72ba0b470, 0x47107ddd9b505a38, 0xad08b0e0c3282d1c, 0xd8045870ef14980e,
+    0x6c022c38f90a4c07, 0x3601161cf205268d, 0x1b8e0b0e798c13c8, 0x83478b07b2468764,
+    0xa011d380818e8f40, 0x5086e740ce47c920, 0x2843fd2067adea10, 0x14aff010bdd87508,
+    0x0ad97808d06cb404, 0x05e23c0468365a02, 0x8c711e02341b2d01, 0x46b60f011a83988e,
+    0x90dab52a387ae76f, 0x486dd4151c3dfdb9, 0x24b86a840e90f0d2, 0x125c354207487869,
+    0x092e94218d243cba, 0x8a174a9ec8121e5d, 0x4585254f64090fa0, 0xaccc9ca9328a8950,
+    0x9d4df05d5f661451, 0xc0a878a0a1330aa6, 0x60543c50de970553, 0x302a1e286fc58ca7,
+    0x18150f14b9ec46dd, 0x0c84890ad27623e0, 0x0642ca05693b9f70, 0x0321658cba93c138,
+    0x86275df09ce8aaa8, 0x439da0784e745554, 0xafc0503c273aa42a, 0xd960281e9d1d5215,
+    0xe230140fc0802984, 0x71180a8960409a42, 0xb60c05ca30204d21, 0x5b068c651810a89e,
+    0x456c34887a3805b9, 0xac361a443d1c8cd2, 0x561b0d22900e4669, 0x2b838811480723ba,
+    0x9bcf4486248d9f5d, 0xc3e9224312c8c1a0, 0xeffa11af0964ee50, 0xf97d86d98a327728,
+    0xe4fa2054a80b329c, 0x727d102a548b194e, 0x39b008152acb8227, 0x9258048415eb419d,
+    0x492c024284fbaec0, 0xaa16012142f35760, 0x550b8e9e21f7a530, 0xa48b474f9ef5dc18,
+    0x70a6a56e2440598e, 0x3853dc371220a247, 0x1ca76e95091051ad, 0x0edd37c48a08a6d8,
+    0x07e095624504536c, 0x8d70c431ac02a736, 0xc83862965601dd1b, 0x641c314b2b8ee083
+};
\ No newline at end of file
diff --git a/riscv/insns/stribog64_l.h b/riscv/insns/stribog64_l.h
new file mode 100644
index 0000000..2780518
--- /dev/null
+++ b/riscv/insns/stribog64_l.h
@@ -0,0 +1,10 @@
+#include "stribog64_common.h"
+
+uint64_t temp = RS1;
+
+uint64_t result = 0;
+
+for(int i = 0; i < 64; i++)
+   result ^= bext(temp, i) ? stribog_l_matrix[i] : 0;
+
+WRITE_RD(temp);
\ No newline at end of file
diff --git a/riscv/insns/stribog64_s.h b/riscv/insns/stribog64_s.h
new file mode 100644
index 0000000..e3ce053
--- /dev/null
+++ b/riscv/insns/stribog64_s.h
@@ -0,0 +1,10 @@
+#include "stribog64_common.h"
+
+uint64_t temp = RS1;
+
+uint8_t * pointer = (uint8_t *)&temp;
+
+for(int i = 0; i < 8; i++)
+    pointer[i] = stribog_substitution_table[pointer[i]];
+
+WRITE_RD(temp);
\ No newline at end of file
diff --git a/riscv/latencycounter.h b/riscv/latencycounter.h
new file mode 100644
index 0000000..1414890
--- /dev/null
+++ b/riscv/latencycounter.h
@@ -0,0 +1,2 @@
+#pragma once
+extern long int full_latency_counter;
\ No newline at end of file
diff --git a/riscv/russiancryptoarith.h b/riscv/russiancryptoarith.h
new file mode 100644
index 0000000..14608f9
--- /dev/null
+++ b/riscv/russiancryptoarith.h
@@ -0,0 +1,48 @@
+#ifndef _RISCV_RUSSIAN_CRYPTO_ARITH_H
+#define _RISCV_RUSSIAN_CRYPTO_ARITH_H
+
+static inline int pcount(uint64_t val)
+{
+  val = (val & 0x5555555555555555U) + ((val >>  1) & 0x5555555555555555U);
+  val = (val & 0x3333333333333333U) + ((val >>  2) & 0x3333333333333333U);
+  val = (val & 0x0f0f0f0f0f0f0f0fU) + ((val >>  4) & 0x0f0f0f0f0f0f0f0fU);
+  val = (val & 0x00ff00ff00ff00ffU) + ((val >>  8) & 0x00ff00ff00ff00ffU);
+  val = (val & 0x0000ffff0000ffffU) + ((val >> 16) & 0x0000ffff0000ffffU);
+  val = (val & 0x00000000ffffffffU) + ((val >> 32) & 0x00000000ffffffffU);
+  return val;
+}
+
+inline uint64_t bmatxor(int64_t rs1, int64_t rs2t)
+{
+    
+    for (int i = 0; i < 3; i++) {
+        rs2t = (rs2t & 0xFFFF00000000FFFFLL) | ((rs2t & 0x0000FFFF00000000LL) >> 16) | ((rs2t & 0x00000000FFFF0000LL) << 16);
+        rs2t = (rs2t & 0xFF0000FFFF0000FFLL) | ((rs2t & 0x00FF000000FF0000LL) >>  8) | ((rs2t & 0x0000FF000000FF00LL) <<  8);
+        rs2t = (rs2t & 0xF00FF00FF00FF00FLL) | ((rs2t & 0x0F000F000F000F00LL) >>  4) | ((rs2t & 0x00F000F000F000F0LL) <<  4);
+        rs2t = (rs2t & 0xC3C3C3C3C3C3C3C3LL) | ((rs2t & 0x3030303030303030LL) >>  2) | ((rs2t & 0x0C0C0C0C0C0C0C0CLL) <<  2);
+        rs2t = (rs2t & 0x9999999999999999LL) | ((rs2t & 0x4444444444444444LL) >>  1) | ((rs2t & 0x2222222222222222LL) <<  1);
+    }
+
+    uint8_t u[8]; // rows of rs1
+    uint8_t v[8]; // cols of rs2
+
+    for (int i = 0; i < 8; i++) {
+        u[i] = rs1 >> (i * 8);
+        v[i] = rs2t >> (i * 8);
+    }
+
+    uint64_t x = 0;
+    
+    for (int i = 0; i < 64; i++) {
+        if (pcount(u[i / 8] & v[i % 8]) & 1)
+            x |= 1LL << i;
+    }
+
+    return x;
+}
+
+inline uint64_t bext(uint64_t rs1, uint64_t rs2)
+{
+    return (1 & (rs1 >> rs2));
+}
+#endif
\ No newline at end of file
